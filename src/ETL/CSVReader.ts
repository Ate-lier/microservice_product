import fs from 'fs';
import readline from 'readline';

type parsedLine = Array<string | number | null> | null;

// CSV Reader by line, implemented using an async peekable iterator
// By default, use comma as seperator
export default class CSVReader {
  private state: parsedLine;
  private iterator: AsyncIterator<string>;
  private seperator: RegExp;

  constructor(absolutePath: string, seperator: string = ',') {
    /*
    ** The seperator should be very careful in this case
    ** Eg. "Hi, I am shen",10,"Hello, I am Shennie"
    ** We only need 2 comma, while 4 is presented in the line
    ** We should only match comma that is in between of (null|[0-9]|["])
    ** This is however not the optimal solution, subject to refactor
    */
    this.seperator= new RegExp(`${seperator}(?=[0-9"n])`);

    // Async Iterator generated by NodeJS readline module
    this.iterator = readline.createInterface({
      input: fs.createReadStream(absolutePath)
    })[Symbol.asyncIterator]();

    // State is perversed for peek functionality
    this.state = null;
  }

  // Convert naive next object into array of CSV tuples
  parse(rawLine: string): parsedLine {
    // Parse into string, number or null data type
    const cells: Array<string> = rawLine.split(this.seperator);

    return cells.map(cell => {
      if (cell === 'null') return null;
      if (cell.startsWith('"')) return cell.slice(1, -1);
      return Number(cell);
    });
  }

  // Get the next parsed line
  async next(): Promise<parsedLine> {
    if (this.state) {
      const result = this.state;
      this.state = null;
      return result;
    }

    const next: IteratorResult<string> = await this.iterator.next();

    if (next.done) return null;
    else return this.parse(next.value);
  }

  // Peek will not consume the next, instead perserved in [this.state]
  async peek(): Promise<parsedLine> {
    if (this.state) return this.state;

    const next: IteratorResult<string> = await this.iterator.next();

    if (next.done) return null;

    this.state = this.parse(next.value);
    return this.state;
  }
}
